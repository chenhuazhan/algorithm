<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0059)http://www.concretevitamin.com.cn/informatics/Pack/P08.html -->
<HTML xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>P08: 泛化物品</TITLE>
<META content="MSHTML 6.00.5840.16384" name=GENERATOR>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<STYLE type=text/css>BODY {
	BACKGROUND: white; MARGIN-LEFT: 3%; COLOR: black; MARGIN-RIGHT: 7%
}
P {
	MARGIN-TOP: 1%
}
P.verse {
	MARGIN-LEFT: 3%
}
.example {
	MARGIN-LEFT: 3%
}
H2 {
	MARGIN-TOP: 25px; MARGIN-BOTTOM: 0px
}
H3 {
	MARGIN-BOTTOM: 0px
}
</STYLE>
</HEAD>
<BODY>
<H1>P08: 泛化物品</H1><!-- Page published by Emacs Muse begins here -->
<H2>定义</H2>
<P class=first>考虑这样一种物品，它并没有固定的费用和价值，而是它的价值随着你分配给它的费用而变化。这就是泛化物品的概念。</P>
<P>更严格的定义之。在背包容量为V的背包问题中，泛化物品是一个定义域为0..V中的整数的函数h，当分配给它的费用为v时，能得到的价值就是h(v)。</P>
<P>这个定义有一点点抽象，另一种理解是一个泛化物品就是一个数组h[0..V]，给它费用v，可得到价值h[V]。</P>
<P>一个费用为c价值为w的物品，如果它是01背包中的物品，那么把它看成泛化物品，它就是除了h(c)=w其它函数值都为0的一个函数。如果它是完全背包中的物品，那么它可以看成这样一个函数，仅当v被c整除时有h(v)=v/c*w，其它函数值均为0。如果它是多重背包中重复次数最多为n的物品，那么它对应的泛化物品的函数有h(v)=v/c*w仅当v被c整除且v/c&lt;=n，其它情况函数值均为0。</P>
<P>一个物品组可以看作一个泛化物品h。对于一个0..V中的v，若物品组中不存在费用为v的的物品，则h(v)=0，否则h(v)为所有费用为v的物品的最大价值。<A 
href="http://www.concretevitamin.com.cn/informatics/Pack/P07.html">P07</A>中每个主件及其附件集合等价于一个物品组，自然也可看作一个泛化物品。</P>
<H2>泛化物品的和</H2>
<P 
class=first>如果面对两个泛化物品h和l，要用给定的费用从这两个泛化物品中得到最大的价值，怎么求呢？事实上，对于一个给定的费用v，只需枚举将这个费用如何分配给两个泛化物品就可以了。同样的，对于0..V的每一个整数v，可以求得费用v分配到h和l中的最大价值f(v)。也即</P>
<BLOCKQUOTE>
  <P 
class=quoted><CODE>f(v)=max{h(k)+l(v-k)|0&lt;=k&lt;=v}</CODE></P></BLOCKQUOTE>
<P>可以看到，f也是一个由泛化物品h和l决定的定义域为0..V的函数，也就是说，f是一个由泛化物品h和l决定的泛化物品。</P>
<P>由此可以定义泛化物品的和：h、l都是泛化物品，若泛化物品f满足以上关系式，则称f是h与l的和。这个运算的时间复杂度取决于背包的容量，是O(V^2)。</P>
<P>泛化物品的定义表明：在一个背包问题中，若将两个泛化物品代以它们的和，不影响问题的答案。事实上，对于其中的物品都是泛化物品的背包问题，求它的答案的过程也就是求所有这些泛化物品之和的过程。设此和为s，则答案就是s[0..V]中的最大值。</P>
<H2>背包问题的泛化物品</H2>
<P 
class=first>一个背包问题中，可能会给出很多条件，包括每种物品的费用、价值等属性，物品之间的分组、依赖等关系等。但肯定能将问题对应于某个泛化物品。也就是说，给定了所有条件以后，就可以对每个非负整数v求得：若背包容量为v，将物品装入背包可得到的最大价值是多少，这可以认为是定义在非负整数集上的一件泛化物品。这个泛化物品——或者说问题所对应的一个定义域为非负整数的函数——包含了关于问题本身的高度浓缩的信息。一般而言，求得这个泛化物品的一个子域（例如0..V）的值之后，就可以根据这个函数的取值得到背包问题的最终答案。</P>
<P>综上所述，一般而言，求解背包问题，即求解这个问题所对应的一个函数，即该问题的泛化物品。而求解某个泛化物品的一种方法就是将它表示为若干泛化物品的和然后求之。</P>
<H2>小结</H2>
<P class=first>本讲可以说都是我自己的原创思想。具体来说，是我在学习函数式编程的 Scheme 
语言时，用函数编程的眼光审视各类背包问题得出的理论。这一讲真的很抽象，也许在“模型的抽象程度”这一方面已经超出了NOIP的要求，所以暂且看不懂也没关系。相信随着你的OI之路逐渐延伸，有一天你会理解的。</P>
<P>我想说：“思考”是一个OIer最重要的品质。简单的问题，深入思考以后，也能发现更多。</P>
<P><A 
href="http://www.concretevitamin.com.cn/informatics/Pack/Index.html">首页</A></P>
<HR>

<P>Copyright (c) 2007 Tianyi Cui</P>
<P>Permission is granted to copy, distribute and/or modify this document under 
the terms of the <A href="http://www.gnu.org/licenses/fdl.txt">GNU Free 
Documentation License</A>, Version 1.2 or any later version published by the 
Free Software 
Foundation.</P><!-- Page published by Emacs Muse ends here --></BODY></HTML>
