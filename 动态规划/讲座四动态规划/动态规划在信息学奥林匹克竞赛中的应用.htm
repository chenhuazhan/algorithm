<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0040)http://noi.stinfo.net/ljcm/ljcm_dtgh.htm -->
<HTML><HEAD><TITLE>动态规划</TITLE>
<META http-equiv=Content-Type content="text/html; charset=gb2312">
<META content="MSHTML 5.50.4134.100" name=GENERATOR><LINK 
href="动态规划在信息学奥林匹克竞赛中的应用.files/js_css.css" type=text/css rel=stylesheet></HEAD>
<BODY bgColor=#ffffff>
<TABLE cellSpacing=0 width="98%" border=0>
  <TBODY>
  <TR>
    <TD bgColor=#00ccff>
      <DIV align=center><A href="http://noi.stinfo.net/index.htm" t>首页</A> | <A 
      href="http://noi.stinfo.net/ljcm/ljcm.htm">老将出马</A> | <FONT 
      color=#000000><A 
      href="http://noi.stinfo.net/ljcm/ljcm_dtgh.htm">动态规划</A></FONT>：</DIV></TD></TR></TBODY></TABLE>
<P>&nbsp;</P>
<H3 align=center><FONT color=#ff0000>动态规划在信息学奥林匹克竞赛中的应用</FONT></H3>
<P>一.动态规划含义:<BR>&nbsp;&nbsp; 
在现实生活中,有一类活动的过程,由于它的特殊性,可将过程分成若干个互相联系的阶段,在它的每一阶段都要做出决策,从而使整个过程达到最好的活动效果.因此,各个阶段决策确定后,组成一个决策序列,因而也就确定了整个过程的一条活动路线.这种把一个问题看作是一个前后关联具有链状结构的多阶段过程,就称为多阶段决策过程,这种问题称为多阶段决策问题.<BR>&nbsp;&nbsp; 
在多阶段决策问题中,各个阶段采取的决策,一般来说是和时间有关的,决策依赖于当前状态,又随即引起状态的转移,一个决策序列就是在变化的状态中产生出来的,故有"动态"的含义,我们称这种解决多阶段决策最优化的过程为动态规划.</P>
<P>二.动态规划特征<BR>&nbsp;&nbsp; 动态规划的显著特征是:无后效性,有边界条件,且一般划分为很明显的阶段.<BR>&nbsp;&nbsp; 
动态规划一般还存在一条或多条状态转移方程.</P>
<P>三.例题<BR>1. Catcher防卫导弹 (GDOI'98)<BR>&nbsp;&nbsp; 
题目讲得很麻烦,归根结底就是求一整串数中的最长不上升序列<BR>&nbsp;&nbsp; 
这道题目一开始我使用回溯算法,大概可以拿到1/3的分吧,后来发现这其实是动态规划算法中最基础的题目,用一个二维数组C[1..Max,1..2]来建立动态规划状态转移方程(注:C[1..Max,1]表示当前状态最多可击落的导弹数,C[1..Max,2]表示当前状态的前继标志):Ci=Max{C[j]+1,(j=i+1..n)},然后程序也就不难实现了.<BR>示范程序:</P>
<P>program catcher_hh;<BR>var<BR>&nbsp; f:text;<BR>&nbsp; 
i,j,k,max,n,num:integer;<BR>&nbsp; a:array [1..4000] of integer; 
{导弹高度数组}<BR>&nbsp; c:array [1..4000,1..2] of integer;&nbsp; 
{动态规划数组}<BR>procedure readfile;<BR>begin<BR>&nbsp; assign(f,'catcher.dat'); 
reset(f);<BR>&nbsp; readln(f,num);<BR>&nbsp; for i:=1 to num do<BR>&nbsp; 
readln(f,a[i]);<BR>end;<BR>procedure work;<BR>begin<BR>&nbsp; 
fillchar(c,sizeof(c),0); c[num,1]:=1;&nbsp;&nbsp; {清空数组,赋初值}<BR>&nbsp; 
{开始进行动态规划}<BR>&nbsp; for i:=num-1 downto 1 do<BR>&nbsp; 
begin<BR>&nbsp;&nbsp;&nbsp; n:=0; max:=1;<BR>&nbsp;&nbsp;&nbsp; for j:=i+1 to 
num do<BR>&nbsp;&nbsp;&nbsp; if (a[i]&gt;a[j]) and 
(max&lt;1+c[j,1])<BR>&nbsp;&nbsp;&nbsp; then begin n:=j; max:=1+c[j,1]; 
end;<BR>&nbsp;&nbsp;&nbsp; c[i,1]:=max; c[i,2]:=n;<BR>&nbsp; end;<BR>&nbsp; 
writeln; writeln('Max : ',max);&nbsp; {打印最大值}<BR>&nbsp; max:=0; n:=0;<BR>&nbsp; 
for i:=1 to num do<BR>&nbsp; if c[i,1]&gt;max then begin max:=c[i,1]; n:=i; 
end;<BR>&nbsp; {返回寻找路径}<BR>&nbsp; repeat<BR>&nbsp;&nbsp;&nbsp; writeln(n,' '); 
n:=c[n,2];<BR>&nbsp; until n=0;<BR>end;<BR>begin<BR>&nbsp; readfile; 
work;<BR>end.</P>
<P align=left>2. Perform巡回演出 (GDKOI'2000)<BR>题目描述:<BR>&nbsp;&nbsp; 
Flute市的Phlharmoniker乐团2000年准备到Harp市做一次大型演出,本着普及古典音乐的目的,乐团指挥L.Y.M准备在到达Harp市之前先在周围一些小城市作一段时间的巡回演出,此后的几天里,音乐家们将每天搭乘一个航班从一个城市飞到另一个城市,最后才到达目的地Harp市(乐团可多次在同一城市演出).<BR>&nbsp;&nbsp; 
由于航线的费用和班次每天都在变,城市和城市之间都有一份循环的航班表,每一时间,每一方向,航班表循环的周期都可能不同.现要求寻找一张花费费用最小的演出表.<BR>输入:<BR>&nbsp;&nbsp; 
输入文件包括若干个场景.每个场景的描述由一对整数n(2&lt;=n&lt;=10)和k(1&lt;=k&lt;=1000)开始,音乐家们要在这n个城市作巡回演出,城市用1..n标号,其中1是起点Flute市,n是终点Harp市,接下来有n*(n-1)份航班表,一份航班表一行,描述每对城市之间的航线和价格,第一组n-1份航班表对应从城市1到其他城市(2,3,...n)的航班,接下的n-1行是从城市2到其他城市(1,3,4...n)的航班,如此下去.<BR>&nbsp;&nbsp; 
每份航班又一个整数d(1&lt;=d&lt;=30)开始,表示航班表循环的周期,接下来的d个非负整数表示1,2...d天对应的两个城市的航班的价格,价格为零表示那天两个城市之间没有航班.例如"3 
75 0 
80"表示第一天机票价格是75KOI,第二天没有航班,第三天的机票是80KOI,然后循环:第四天又是75KOI,第五天没有航班,如此循环.输入文件由n=k=0的场景结束.<BR>输出:<BR>&nbsp;&nbsp; 
对每个场景如果乐团可能从城市1出发,每天都要飞往另一个城市,最后(经过k天)抵达城市n,则输出这k个航班价格之和的最小值.如果不可能存在这样的巡回演出路线,输出0.<BR>样例输入:<BR>3 
6<BR>2 130 150<BR>3 75 0 80<BR>7 120 110 0 100 110 120 0<BR>4 60 70 60 50<BR>3 0 
135 140<BR>2 70 80<BR>2 3<BR>2 0 70<BR>1 80<BR>0 
0<BR>样例输出:<BR>460<BR>0<BR>&nbsp;&nbsp; 
初看这道题,很容易便可以想到动态规划,因为第x天在第y个地方的最优值只与第x-1天有关,符合动态规划的无后效性原则,即只与上一个状态相关联,而某一天x航班价格不难求出S=C[(x-1) 
mod m 
+1].我们用天数和地点来规划用一个数组A[1..1000,1..10]来存储,A[i,j]表示第i天到达第j个城市的最优值,C[i,j,l]表示i城市与j城市间第l天航班价格,则A[i,j]=Min{A[i-1,l]+C[l,j,i] 
(l=1..n且C[l,j,i]&lt;&gt;0)},动态规划方程一出,尽可以放怀大笑了.</P>
<P align=left>示范程序:<BR>program perform_hh;<BR>var<BR>&nbsp; 
f,fout:text;<BR>&nbsp; p,l,i,j,n,k:integer;<BR>&nbsp; a:array [1..1000,1..10] of 
integer;&nbsp; {动态规划数组}<BR>&nbsp; c:array [1..10,1..10] of record 
{航班价格数组}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
num:integer;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
t:array [1..30] of 
integer;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
end;<BR>&nbsp; e:array [1..1000] of integer;<BR>procedure 
work;<BR>begin<BR>&nbsp; {人工赋第一天各城市最优值}<BR>&nbsp; for i:=1 to n do<BR>&nbsp; 
begin<BR>&nbsp; if c[1,i].t[1]&lt;&gt;0<BR>&nbsp; then 
a[1,i]:=c[1,i].t[1];<BR>&nbsp; end;<BR>&nbsp; for i:=2 to k do<BR>&nbsp; 
begin<BR>&nbsp;&nbsp;&nbsp; for j:=1 to n do<BR>&nbsp;&nbsp;&nbsp; 
begin<BR>&nbsp;&nbsp;&nbsp; for l:=1 to n do<BR>&nbsp;&nbsp;&nbsp; 
begin<BR>&nbsp;&nbsp;&nbsp; if (j&lt;&gt;l)<BR>&nbsp;&nbsp;&nbsp; and 
(c[l,j].t[(i-1) mod c[l,j].num+1]&lt;&gt;0)&nbsp; {判断存在航班}<BR>&nbsp;&nbsp;&nbsp; 
and ((a[i,j]=0) or (a[i-1,l]+c[l,j].t[(i-1) mod c[l,j].num+1]&lt;a[i,j])) 
{判断比当前解优}<BR>&nbsp;&nbsp;&nbsp; then a[i,j]:=a[i-1,l]+c[l,j].t[(i-1) mod 
c[l,j].num+1];&nbsp; {赋值}<BR>&nbsp;&nbsp;&nbsp; end;<BR>&nbsp;&nbsp;&nbsp; 
end;<BR>&nbsp; end;<BR>&nbsp; e[p]:=a[k,n]; {第p个场景的最优值}<BR>end;<BR>procedure 
readfile;&nbsp; {读文件}<BR>begin<BR>&nbsp; assign(f,'PERFORM.DAT'); reset(f); 
<BR>&nbsp; assign(fout,'PERFORM.OUT'); rewrite(fout);<BR>&nbsp; readln(f,n,k); 
p:=0;<BR>&nbsp; while (n&lt;&gt;0) and (k&lt;&gt;0) do<BR>&nbsp; 
begin<BR>&nbsp;&nbsp;&nbsp; p:=p+1;<BR>&nbsp;&nbsp;&nbsp; 
fillchar(c,sizeof(c),0);<BR>&nbsp;&nbsp;&nbsp; 
fillchar(a,sizeof(a),0);<BR>&nbsp;&nbsp;&nbsp; for i:=1 to n 
do<BR>&nbsp;&nbsp;&nbsp; begin<BR>&nbsp;&nbsp;&nbsp; for j:=1 to i-1 
do<BR>&nbsp;&nbsp;&nbsp; begin<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
read(f,c[i,j].num);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for l:=1 to c[i,j].num 
do<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; read(f,c[i,j].t[l]);<BR>&nbsp;&nbsp;&nbsp; 
end;<BR>&nbsp;&nbsp;&nbsp; for j:=i+1 to n do<BR>&nbsp;&nbsp;&nbsp; 
begin<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
read(f,c[i,j].num);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for l:=1 to c[i,j].num 
do<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; read(f,c[i,j].t[l]);<BR>&nbsp;&nbsp;&nbsp; 
end;<BR>&nbsp; end;<BR>&nbsp; work;<BR>&nbsp; readln(f,n,k);<BR>&nbsp; 
end;<BR>&nbsp; {输出各个场景的解}<BR>&nbsp; for i:=1 to p-1 do<BR>&nbsp; 
writeln(fout,e[i]);<BR>&nbsp; write(fout,e[p]);<BR>&nbsp; close(f);<BR>&nbsp; 
close(fout);<BR>end;<BR>begin<BR>&nbsp; readfile;<BR>end.</P>
<P align=left>四.小结<BR>&nbsp;&nbsp; 
动态规划与穷举法相比,大大减少了计算量,丰富了计算结果,不仅求出了当前状态到目标状态的最优值,而且同时求出了到中间状态的最优值,这对于很多实际问题来说是很有用的.这几年,动态规划已在各省市信息学奥林匹克竞赛中占据相当重要的地位,每年省赛8道题目中一般有2~3道题目属于动态规划,动态规划相比一般穷举也存在一定缺点:空间占据过多,但对于空间需求量不大的题目来说,动态规划无疑是最佳方法!</P>
<P align=left>五.课后题目<BR>1. 
m个人抄n本书,每本书页数已知,每个人(第一个人除外)都必须从上一个人抄的最后一本书的下一本抄起(书必须整本整本的抄),求一种分配方法,使抄书页数最多的人抄书页数尽可能少. 
(GDOI''99 Books).<BR>2. 有一字符串有多种编码方式可供人选择，将这个字符串进行编码，使求得得编码长度最短。　（GDKOI'2000 
Compress)<BR>3. 
Canada境内有自西向东的一系列城市：Halifax,Hamilton,Montelia,Vancouver...，各个城市之间可能有航班相连，也可能没有，现要求从最西的城市出发，自西向东到达最东的城市，再返回最西的城市，除最西城市外，其他每个城市只能访问一次，求最多能访问多少个城市．</P>
<P align=right>(汕头市聿怀中学初三&nbsp; 黄皓&nbsp;&nbsp; E-mail: <A 
href="mailto:junglyhh@163.net"><FONT 
color=#0000ff>junglyhh@163.net</FONT></A>（Write to me Soon!) }</P>
<TABLE cellSpacing=0 width="98%" border=0>
  <TBODY>
  <TR>
    <TD bgColor=#00ccff>
      <DIV align=center><A href="http://noi.stinfo.net/index.htm" t>首页</A> | <A 
      href="http://noi.stinfo.net/ljcm/ljcm.htm">老将出马</A> | <FONT 
      color=#000000><A 
      href="http://noi.stinfo.net/ljcm/ljcm_dtgh.htm">动态规划</A></FONT>：</DIV></TD></TR></TBODY></TABLE>
<P 
align=right><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</P></BODY></HTML>
